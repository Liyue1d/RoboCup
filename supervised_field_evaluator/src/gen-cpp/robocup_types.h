/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef robocup_TYPES_H
#define robocup_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef std::vector<class FieldEvaluation>  FieldEvaluationList;

class PlayerState;

class FieldEvaluation;


class PlayerState : public virtual ::apache::thrift::TBase {
 public:

  PlayerState(const PlayerState&);
  PlayerState& operator=(const PlayerState&);
  PlayerState() : x(0), y(0), unum(0) {
  }

  virtual ~PlayerState() throw();
  double x;
  double y;
  int32_t unum;

  void __set_x(const double val);

  void __set_y(const double val);

  void __set_unum(const int32_t val);

  bool operator == (const PlayerState & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(unum == rhs.unum))
      return false;
    return true;
  }
  bool operator != (const PlayerState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayerState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PlayerState &a, PlayerState &b);

inline std::ostream& operator<<(std::ostream& out, const PlayerState& obj)
{
  obj.printTo(out);
  return out;
}


class FieldEvaluation : public virtual ::apache::thrift::TBase {
 public:

  FieldEvaluation(const FieldEvaluation&);
  FieldEvaluation& operator=(const FieldEvaluation&);
  FieldEvaluation() : cycle(0), res(0), holder_unum(0), wm_self_unum(0), state_self_unum(0), wm_ball_x(0), wm_ball_y(0), state_ball_x(0), state_ball_y(0), theirTeamGoalPos_x(0), theirTeamGoalPos_y(0), wm_self_x(0), wm_self_y(0), holder_x(0), holder_y(0), action_type(0) {
  }

  virtual ~FieldEvaluation() throw();
  int32_t cycle;
  double res;
  int32_t holder_unum;
  int32_t wm_self_unum;
  int32_t state_self_unum;
  double wm_ball_x;
  double wm_ball_y;
  double state_ball_x;
  double state_ball_y;
  double theirTeamGoalPos_x;
  double theirTeamGoalPos_y;
  double wm_self_x;
  double wm_self_y;
  double holder_x;
  double holder_y;
  std::vector<PlayerState>  opps;
  std::vector<PlayerState>  mates;
  int32_t action_type;

  void __set_cycle(const int32_t val);

  void __set_res(const double val);

  void __set_holder_unum(const int32_t val);

  void __set_wm_self_unum(const int32_t val);

  void __set_state_self_unum(const int32_t val);

  void __set_wm_ball_x(const double val);

  void __set_wm_ball_y(const double val);

  void __set_state_ball_x(const double val);

  void __set_state_ball_y(const double val);

  void __set_theirTeamGoalPos_x(const double val);

  void __set_theirTeamGoalPos_y(const double val);

  void __set_wm_self_x(const double val);

  void __set_wm_self_y(const double val);

  void __set_holder_x(const double val);

  void __set_holder_y(const double val);

  void __set_opps(const std::vector<PlayerState> & val);

  void __set_mates(const std::vector<PlayerState> & val);

  void __set_action_type(const int32_t val);

  bool operator == (const FieldEvaluation & rhs) const
  {
    if (!(cycle == rhs.cycle))
      return false;
    if (!(res == rhs.res))
      return false;
    if (!(holder_unum == rhs.holder_unum))
      return false;
    if (!(wm_self_unum == rhs.wm_self_unum))
      return false;
    if (!(state_self_unum == rhs.state_self_unum))
      return false;
    if (!(wm_ball_x == rhs.wm_ball_x))
      return false;
    if (!(wm_ball_y == rhs.wm_ball_y))
      return false;
    if (!(state_ball_x == rhs.state_ball_x))
      return false;
    if (!(state_ball_y == rhs.state_ball_y))
      return false;
    if (!(theirTeamGoalPos_x == rhs.theirTeamGoalPos_x))
      return false;
    if (!(theirTeamGoalPos_y == rhs.theirTeamGoalPos_y))
      return false;
    if (!(wm_self_x == rhs.wm_self_x))
      return false;
    if (!(wm_self_y == rhs.wm_self_y))
      return false;
    if (!(holder_x == rhs.holder_x))
      return false;
    if (!(holder_y == rhs.holder_y))
      return false;
    if (!(opps == rhs.opps))
      return false;
    if (!(mates == rhs.mates))
      return false;
    if (!(action_type == rhs.action_type))
      return false;
    return true;
  }
  bool operator != (const FieldEvaluation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FieldEvaluation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FieldEvaluation &a, FieldEvaluation &b);

inline std::ostream& operator<<(std::ostream& out, const FieldEvaluation& obj)
{
  obj.printTo(out);
  return out;
}



#endif
