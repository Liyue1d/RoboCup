/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "robocup_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




PlayerState::~PlayerState() throw() {
}


void PlayerState::__set_x(const double val) {
  this->x = val;
}

void PlayerState::__set_y(const double val) {
  this->y = val;
}

void PlayerState::__set_unum(const int32_t val) {
  this->unum = val;
}

uint32_t PlayerState::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_x = false;
  bool isset_y = false;
  bool isset_unum = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          isset_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          isset_y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unum);
          isset_unum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_x)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PlayerState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PlayerState");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->unum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayerState &a, PlayerState &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.unum, b.unum);
}

PlayerState::PlayerState(const PlayerState& other0) {
  x = other0.x;
  y = other0.y;
  unum = other0.unum;
}
PlayerState& PlayerState::operator=(const PlayerState& other1) {
  x = other1.x;
  y = other1.y;
  unum = other1.unum;
  return *this;
}
void PlayerState::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PlayerState(";
  out << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ", " << "unum=" << to_string(unum);
  out << ")";
}


FieldEvaluation::~FieldEvaluation() throw() {
}


void FieldEvaluation::__set_cycle(const int32_t val) {
  this->cycle = val;
}

void FieldEvaluation::__set_res(const double val) {
  this->res = val;
}

void FieldEvaluation::__set_holder_unum(const int32_t val) {
  this->holder_unum = val;
}

void FieldEvaluation::__set_wm_self_unum(const int32_t val) {
  this->wm_self_unum = val;
}

void FieldEvaluation::__set_state_self_unum(const int32_t val) {
  this->state_self_unum = val;
}

void FieldEvaluation::__set_wm_ball_x(const double val) {
  this->wm_ball_x = val;
}

void FieldEvaluation::__set_wm_ball_y(const double val) {
  this->wm_ball_y = val;
}

void FieldEvaluation::__set_state_ball_x(const double val) {
  this->state_ball_x = val;
}

void FieldEvaluation::__set_state_ball_y(const double val) {
  this->state_ball_y = val;
}

void FieldEvaluation::__set_theirTeamGoalPos_x(const double val) {
  this->theirTeamGoalPos_x = val;
}

void FieldEvaluation::__set_theirTeamGoalPos_y(const double val) {
  this->theirTeamGoalPos_y = val;
}

void FieldEvaluation::__set_wm_self_x(const double val) {
  this->wm_self_x = val;
}

void FieldEvaluation::__set_wm_self_y(const double val) {
  this->wm_self_y = val;
}

void FieldEvaluation::__set_holder_x(const double val) {
  this->holder_x = val;
}

void FieldEvaluation::__set_holder_y(const double val) {
  this->holder_y = val;
}

void FieldEvaluation::__set_opps(const std::vector<PlayerState> & val) {
  this->opps = val;
}

void FieldEvaluation::__set_mates(const std::vector<PlayerState> & val) {
  this->mates = val;
}

void FieldEvaluation::__set_action_type(const int32_t val) {
  this->action_type = val;
}

uint32_t FieldEvaluation::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_cycle = false;
  bool isset_res = false;
  bool isset_holder_unum = false;
  bool isset_wm_self_unum = false;
  bool isset_state_self_unum = false;
  bool isset_wm_ball_x = false;
  bool isset_wm_ball_y = false;
  bool isset_state_ball_x = false;
  bool isset_state_ball_y = false;
  bool isset_theirTeamGoalPos_x = false;
  bool isset_theirTeamGoalPos_y = false;
  bool isset_wm_self_x = false;
  bool isset_wm_self_y = false;
  bool isset_holder_x = false;
  bool isset_holder_y = false;
  bool isset_opps = false;
  bool isset_mates = false;
  bool isset_action_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cycle);
          isset_cycle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->res);
          isset_res = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->holder_unum);
          isset_holder_unum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->wm_self_unum);
          isset_wm_self_unum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->state_self_unum);
          isset_state_self_unum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->wm_ball_x);
          isset_wm_ball_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->wm_ball_y);
          isset_wm_ball_y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->state_ball_x);
          isset_state_ball_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->state_ball_y);
          isset_state_ball_y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->theirTeamGoalPos_x);
          isset_theirTeamGoalPos_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->theirTeamGoalPos_y);
          isset_theirTeamGoalPos_y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->wm_self_x);
          isset_wm_self_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->wm_self_y);
          isset_wm_self_y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->holder_x);
          isset_holder_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->holder_y);
          isset_holder_y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->opps.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->opps.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->opps[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_opps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->mates.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->mates.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += this->mates[_i11].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_mates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_type);
          isset_action_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_cycle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_res)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_holder_unum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_wm_self_unum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state_self_unum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_wm_ball_x)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_wm_ball_y)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state_ball_x)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state_ball_y)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_theirTeamGoalPos_x)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_theirTeamGoalPos_y)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_wm_self_x)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_wm_self_y)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_holder_x)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_holder_y)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_opps)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mates)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FieldEvaluation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FieldEvaluation");

  xfer += oprot->writeFieldBegin("cycle", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->cycle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("res", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->res);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("holder_unum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->holder_unum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wm_self_unum", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->wm_self_unum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state_self_unum", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->state_self_unum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wm_ball_x", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->wm_ball_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wm_ball_y", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->wm_ball_y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state_ball_x", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->state_ball_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state_ball_y", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->state_ball_y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("theirTeamGoalPos_x", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->theirTeamGoalPos_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("theirTeamGoalPos_y", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->theirTeamGoalPos_y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wm_self_x", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->wm_self_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wm_self_y", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->wm_self_y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("holder_x", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->holder_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("holder_y", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->holder_y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("opps", ::apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->opps.size()));
    std::vector<PlayerState> ::const_iterator _iter12;
    for (_iter12 = this->opps.begin(); _iter12 != this->opps.end(); ++_iter12)
    {
      xfer += (*_iter12).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mates", ::apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->mates.size()));
    std::vector<PlayerState> ::const_iterator _iter13;
    for (_iter13 = this->mates.begin(); _iter13 != this->mates.end(); ++_iter13)
    {
      xfer += (*_iter13).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_type", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->action_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FieldEvaluation &a, FieldEvaluation &b) {
  using ::std::swap;
  swap(a.cycle, b.cycle);
  swap(a.res, b.res);
  swap(a.holder_unum, b.holder_unum);
  swap(a.wm_self_unum, b.wm_self_unum);
  swap(a.state_self_unum, b.state_self_unum);
  swap(a.wm_ball_x, b.wm_ball_x);
  swap(a.wm_ball_y, b.wm_ball_y);
  swap(a.state_ball_x, b.state_ball_x);
  swap(a.state_ball_y, b.state_ball_y);
  swap(a.theirTeamGoalPos_x, b.theirTeamGoalPos_x);
  swap(a.theirTeamGoalPos_y, b.theirTeamGoalPos_y);
  swap(a.wm_self_x, b.wm_self_x);
  swap(a.wm_self_y, b.wm_self_y);
  swap(a.holder_x, b.holder_x);
  swap(a.holder_y, b.holder_y);
  swap(a.opps, b.opps);
  swap(a.mates, b.mates);
  swap(a.action_type, b.action_type);
}

FieldEvaluation::FieldEvaluation(const FieldEvaluation& other14) {
  cycle = other14.cycle;
  res = other14.res;
  holder_unum = other14.holder_unum;
  wm_self_unum = other14.wm_self_unum;
  state_self_unum = other14.state_self_unum;
  wm_ball_x = other14.wm_ball_x;
  wm_ball_y = other14.wm_ball_y;
  state_ball_x = other14.state_ball_x;
  state_ball_y = other14.state_ball_y;
  theirTeamGoalPos_x = other14.theirTeamGoalPos_x;
  theirTeamGoalPos_y = other14.theirTeamGoalPos_y;
  wm_self_x = other14.wm_self_x;
  wm_self_y = other14.wm_self_y;
  holder_x = other14.holder_x;
  holder_y = other14.holder_y;
  opps = other14.opps;
  mates = other14.mates;
  action_type = other14.action_type;
}
FieldEvaluation& FieldEvaluation::operator=(const FieldEvaluation& other15) {
  cycle = other15.cycle;
  res = other15.res;
  holder_unum = other15.holder_unum;
  wm_self_unum = other15.wm_self_unum;
  state_self_unum = other15.state_self_unum;
  wm_ball_x = other15.wm_ball_x;
  wm_ball_y = other15.wm_ball_y;
  state_ball_x = other15.state_ball_x;
  state_ball_y = other15.state_ball_y;
  theirTeamGoalPos_x = other15.theirTeamGoalPos_x;
  theirTeamGoalPos_y = other15.theirTeamGoalPos_y;
  wm_self_x = other15.wm_self_x;
  wm_self_y = other15.wm_self_y;
  holder_x = other15.holder_x;
  holder_y = other15.holder_y;
  opps = other15.opps;
  mates = other15.mates;
  action_type = other15.action_type;
  return *this;
}
void FieldEvaluation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FieldEvaluation(";
  out << "cycle=" << to_string(cycle);
  out << ", " << "res=" << to_string(res);
  out << ", " << "holder_unum=" << to_string(holder_unum);
  out << ", " << "wm_self_unum=" << to_string(wm_self_unum);
  out << ", " << "state_self_unum=" << to_string(state_self_unum);
  out << ", " << "wm_ball_x=" << to_string(wm_ball_x);
  out << ", " << "wm_ball_y=" << to_string(wm_ball_y);
  out << ", " << "state_ball_x=" << to_string(state_ball_x);
  out << ", " << "state_ball_y=" << to_string(state_ball_y);
  out << ", " << "theirTeamGoalPos_x=" << to_string(theirTeamGoalPos_x);
  out << ", " << "theirTeamGoalPos_y=" << to_string(theirTeamGoalPos_y);
  out << ", " << "wm_self_x=" << to_string(wm_self_x);
  out << ", " << "wm_self_y=" << to_string(wm_self_y);
  out << ", " << "holder_x=" << to_string(holder_x);
  out << ", " << "holder_y=" << to_string(holder_y);
  out << ", " << "opps=" << to_string(opps);
  out << ", " << "mates=" << to_string(mates);
  out << ", " << "action_type=" << to_string(action_type);
  out << ")";
}


