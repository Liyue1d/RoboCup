/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RoboCup_H
#define RoboCup_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "robocup_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RoboCupIf {
 public:
  virtual ~RoboCupIf() {}
  virtual void save_field_evaluations(const FieldEvaluationList& list_) = 0;
};

class RoboCupIfFactory {
 public:
  typedef RoboCupIf Handler;

  virtual ~RoboCupIfFactory() {}

  virtual RoboCupIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RoboCupIf* /* handler */) = 0;
};

class RoboCupIfSingletonFactory : virtual public RoboCupIfFactory {
 public:
  RoboCupIfSingletonFactory(const boost::shared_ptr<RoboCupIf>& iface) : iface_(iface) {}
  virtual ~RoboCupIfSingletonFactory() {}

  virtual RoboCupIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RoboCupIf* /* handler */) {}

 protected:
  boost::shared_ptr<RoboCupIf> iface_;
};

class RoboCupNull : virtual public RoboCupIf {
 public:
  virtual ~RoboCupNull() {}
  void save_field_evaluations(const FieldEvaluationList& /* list_ */) {
    return;
  }
};

typedef struct _RoboCup_save_field_evaluations_args__isset {
  _RoboCup_save_field_evaluations_args__isset() : list_(false) {}
  bool list_ :1;
} _RoboCup_save_field_evaluations_args__isset;

class RoboCup_save_field_evaluations_args {
 public:

  RoboCup_save_field_evaluations_args(const RoboCup_save_field_evaluations_args&);
  RoboCup_save_field_evaluations_args& operator=(const RoboCup_save_field_evaluations_args&);
  RoboCup_save_field_evaluations_args() {
  }

  virtual ~RoboCup_save_field_evaluations_args() throw();
  FieldEvaluationList list_;

  _RoboCup_save_field_evaluations_args__isset __isset;

  void __set_list_(const FieldEvaluationList& val);

  bool operator == (const RoboCup_save_field_evaluations_args & rhs) const
  {
    if (!(list_ == rhs.list_))
      return false;
    return true;
  }
  bool operator != (const RoboCup_save_field_evaluations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RoboCup_save_field_evaluations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RoboCup_save_field_evaluations_pargs {
 public:


  virtual ~RoboCup_save_field_evaluations_pargs() throw();
  const FieldEvaluationList* list_;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RoboCup_save_field_evaluations_result {
 public:

  RoboCup_save_field_evaluations_result(const RoboCup_save_field_evaluations_result&);
  RoboCup_save_field_evaluations_result& operator=(const RoboCup_save_field_evaluations_result&);
  RoboCup_save_field_evaluations_result() {
  }

  virtual ~RoboCup_save_field_evaluations_result() throw();

  bool operator == (const RoboCup_save_field_evaluations_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RoboCup_save_field_evaluations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RoboCup_save_field_evaluations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RoboCup_save_field_evaluations_presult {
 public:


  virtual ~RoboCup_save_field_evaluations_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RoboCupClient : virtual public RoboCupIf {
 public:
  RoboCupClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RoboCupClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void save_field_evaluations(const FieldEvaluationList& list_);
  void send_save_field_evaluations(const FieldEvaluationList& list_);
  void recv_save_field_evaluations();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RoboCupProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RoboCupIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RoboCupProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_save_field_evaluations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RoboCupProcessor(boost::shared_ptr<RoboCupIf> iface) :
    iface_(iface) {
    processMap_["save_field_evaluations"] = &RoboCupProcessor::process_save_field_evaluations;
  }

  virtual ~RoboCupProcessor() {}
};

class RoboCupProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RoboCupProcessorFactory(const ::boost::shared_ptr< RoboCupIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RoboCupIfFactory > handlerFactory_;
};

class RoboCupMultiface : virtual public RoboCupIf {
 public:
  RoboCupMultiface(std::vector<boost::shared_ptr<RoboCupIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RoboCupMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RoboCupIf> > ifaces_;
  RoboCupMultiface() {}
  void add(boost::shared_ptr<RoboCupIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void save_field_evaluations(const FieldEvaluationList& list_) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->save_field_evaluations(list_);
    }
    ifaces_[i]->save_field_evaluations(list_);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RoboCupConcurrentClient : virtual public RoboCupIf {
 public:
  RoboCupConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RoboCupConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void save_field_evaluations(const FieldEvaluationList& list_);
  int32_t send_save_field_evaluations(const FieldEvaluationList& list_);
  void recv_save_field_evaluations(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
